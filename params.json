{
  "name": "Domonit",
  "tagline": "A Deadly Simple Docker Monitoring Wrapper For Docker API ",
  "body": "[![Build Status](https://travis-ci.org/eon01/DoMonit.svg?branch=master)](https://travis-ci.org/eon01/DoMonit)\r\n# DoMonit\r\n\r\nA deadly simple monitoring tool for Docker - Using A Python Wrapper For Docker API.\r\n[The Blog Post](https://medium.com/@eon01/monitoring-docker-with-python-domonit-34440b8c6830)\r\n\r\n# Compatibility\r\n\r\nA Python wrapper for Dokcer API 1.24 compatible with Docker 1.12.x and later.\r\n\r\n# Purpose \r\n\r\nThe purpose is to write python scripts easily for monitoring all of your Docker containers (running in a Linux distibution - other OS are coming soon in the roadmap of development).\r\n\r\n# The Wrapper\r\n\r\nThis is the Alpha, moving to Beta very very soon :-)\r\n\r\nThe wrapper contains these classes:\r\n\r\n```\r\napi/\r\n├── changes.py\r\n├── containers.py\r\n├── errors.py\r\n├── ids.py\r\n├── inspect.py\r\n├── logs.py\r\n├── process.py\r\n└── stats.py\r\n```\r\n\r\nWhere :\r\n\r\n**Containers** : List containers\r\n\r\n**Inspect** : Return low-level information on the container id\r\n\r\n**Ids** : Return containers IDs\r\n\r\n**Logs** : Get stdout and stderr logs from the container id\r\n\r\n**Process** : List processes running inside the container id. On Unix systems this is done by running the ps command. This endpoint is not supported on Windows.\r\n\r\n**Stats** : This endpoint returns a live stream of a container’s resource usage statistics.\r\n\r\n# Using virtualenv:\r\n\r\n```\r\nvirtualenv DoMonit\r\ncd DoMonit \r\ngit clone https://github.com/eon01/DoMonit.git\r\n. bin/activate\r\ncd DoMonit\r\npip install -r requirements.txt\r\n#To Test:\r\npython examples.py\r\n```\r\n\r\n# Example\r\n\r\nThis is an example script:\r\n\r\n```\r\nfrom api.containers import Containers\r\nfrom api.ids import Ids\r\nfrom api.inspect import Inspect\r\nfrom api.logs import Logs\r\nfrom api.process import Process\r\nfrom api.changes import Changes\r\nfrom api.stats import Stats\r\n\r\n\r\nimport json\r\n\r\n\r\nc = Containers()\r\ni = Ids()\r\n\r\nprint (\"Number of containers is : %s \" % (sum(1 for i in i.ids())))\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    for c_id in i.ids():\r\n\r\n        ins = Inspect(c_id)\r\n        sta = Stats(c_id)\r\n        proc = Process(c_id, ps_args = \"aux\")\r\n\r\n\r\n\r\n        # Container name\r\n        print (\"\\n#Container name\")\r\n        print ins.name()\r\n \r\n        # Container id\r\n        print (\"\\n#Container id\")\r\n        print ins.id()\r\n\r\n        # Memory usage\r\n        mem_u = sta.usage()\r\n\r\n        # Memory limit\r\n        mem_l = sta.limit()\r\n\r\n        # Memory usage %\r\n        print (\"\\n#Memory usage %\")\r\n        print  int(mem_u)*100/int(mem_l)\r\n\r\n\r\n        # The number of times that a process of the cgroup triggered a \"major fault\"\r\n        print (\"\\n#The number of times that a process of the cgroup triggered a major fault\")\r\n        print sta.pgmajfault()\r\n  \r\n\r\n        # Same output as ps aux in *nix\r\n        print(\"\\n#Same output as ps aux in *nix\")\r\n        print proc.ps()\r\n```\r\n\r\nFor the following 5 running containers:\r\n\r\n```\r\ndocker ps\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\r\n1a29e9652822        instavote/vote      \"gunicorn app:app -b \"   12 seconds ago      Up 11 seconds       80/tcp, 100/tcp     vote_webapp_3\r\n6ca598188d1a        instavote/vote      \"gunicorn app:app -b \"   12 seconds ago      Up 11 seconds       80/tcp, 100/tcp     vote_webapp_4\r\n7f1a6bfaf95b        instavote/vote      \"gunicorn app:app -b \"   12 seconds ago      Up 11 seconds       80/tcp, 100/tcp     vote_webapp_5\r\ne3a7066ba953        instavote/vote      \"gunicorn app:app -b \"   6 days ago          Up 5 hours          80/tcp, 100/tcp     vote_webapp_2\r\n1e557c8dc5f7        instavote/vote      \"gunicorn app:app -b \"   6 days ago          Up 5 hours          80/tcp, 100/tcp     vote_webapp_1\r\n```\r\n\r\nthe execution result of the example above is:\r\n\r\n\r\n```\r\nNumber of containers is : 5 \r\n\r\n#Container name\r\n/vote_webapp_3\r\n\r\n#Container id\r\n1a29e9652822447a440799306f4edb65003bca9cdea4c56e1e0ba349d5112d3e\r\n\r\n#Memory usage %\r\n0.697797903077\r\n\r\n#The number of times that a process of the cgroup triggered a major fault\r\n15\r\n\r\n#Same output as ps aux in *nix\r\n{u'Processes': [[u'root', u'26636', u'0.0', u'0.2', u'76808', u'16228', u'?', u'Ss', u'15:43', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'26773', u'0.0', u'0.2', u'88776', u'19976', u'?', u'S', u'15:43', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'26784', u'0.0', u'0.2', u'88572', u'19800', u'?', u'S', u'15:43', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'26787', u'0.0', u'0.2', u'88568', u'19816', u'?', u'S', u'15:43', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'26793', u'0.0', u'0.2', u'88572', u'19828', u'?', u'S', u'15:43', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0']], u'Titles': [u'USER', u'PID', u'%CPU', u'%MEM', u'VSZ', u'RSS', u'TTY', u'STAT', u'START', u'TIME', u'COMMAND']}\r\n\r\n...etc\r\n```\r\n\r\n# DoMonit Functions\r\n\r\nFor better uderstanfing and visibility, I used Python ```dir()``` here to list the different functions of every class under ```api/*```\r\n\r\n```\r\npython dir.py\r\n\r\nContainers()\r\n['__doc__', '__init__', '__module__', 'base', 'command', 'containers', 'created', 'host_config', 'image', 'image_id', 'labels', 'mounts', 'names', 'network_settings', 'ports', 'resp', 'session', 'status', 'url']\r\n\r\n\r\nIds()\r\n['__doc__', '__init__', '__module__', 'base', 'ids', 'resp', 'session', 'url']\r\n\r\n\r\nInspect()\r\n['__doc__', '__init__', '__module__', 'app_armor_profile', 'args', 'attach_stderr', 'attach_stdin', 'base', 'cmd', 'container_id', 'created', 'domainname', 'driver', 'entrypoint', 'env', 'exec_ids', 'exposed_ports', 'host_config_binds', 'host_config_blkio_device_read_bps', 'host_config_blkio_device_write_bps', 'host_config_blkio_device_write_iops', 'host_config_blkio_weight_device', 'host_config_cap_add', 'host_config_cap_drop', 'host_config_container_id_file', 'host_config_cpu_percent', 'host_config_cpu_period', 'host_config_cpu_shares', 'host_config_cpuset_cpus', 'host_config_cpuset_mems', 'host_config_devices', 'host_config_dns', 'host_config_dns_options', 'host_config_dns_search', 'host_config_extra_hosts', 'host_config_host_config_shm_size', 'host_config_ipc_mode', 'host_config_kernel_memory', 'host_config_links', 'host_config_log_config_config', 'host_config_log_config_type', 'host_config_lxc_conf', 'host_config_maximum_iobps', 'host_config_maximum_iops', 'host_config_memory', 'host_config_memory_reservation', 'host_config_memory_swap', 'host_config_network_mode', 'host_config_oom_kill_disable', 'host_config_oom_score_adj', 'host_config_pid_mode', 'host_config_port_bindings', 'host_config_privileged', 'host_config_publish_all_ports', 'host_config_readonly_rootfs', 'host_config_restart_policy_maximum_retry_count', 'host_config_restart_policy_name', 'host_config_security_opt', 'host_config_storage_opt', 'host_config_sysctls', 'host_config_ulimits', 'host_config_volume_driver', 'host_config_volumes_from', 'hostname', 'hostname_path', 'hosts_path', 'id', 'image', 'inspect', 'labels', 'log_path', 'mac_address', 'mount_label', 'mounts', 'name', 'network_disabled', 'network_settings_bridge', 'network_settings_endpoint_id', 'network_settings_gateway', 'network_settings_global_ipv6_address', 'network_settings_global_ipv6_prefixLen', 'network_settings_hairpin_mode', 'network_settings_ip_address', 'network_settings_ip_prefixLen', 'network_settings_ipv6_gateway', 'network_settings_link_local_ipv6_address', 'network_settings_link_local_ipv6_prefix_len', 'network_settings_mac_address', 'network_settings_networks', 'network_settings_ports', 'network_settings_sandbox_id', 'network_settings_sandbox_key', 'network_settings_secondary_ip_addresses', 'network_settings_secondary_ipv6_addresses', 'on_build', 'open_stdin', 'path', 'process_label', 'resolv_conf_path', 'resp', 'restart_count', 'session', 'state_dead', 'state_error', 'state_exit_code', 'state_finished_at', 'state_oom_killed', 'state_paused', 'state_pid', 'state_restarting', 'state_running', 'state_started_at', 'state_status', 'stdin_once', 'stop_signal', 'tty', 'url', 'user', 'volumes', 'working_dir']\r\n\r\n\r\nStats()\r\n['__doc__', '__init__', '__module__', 'active_anon', 'active_file', 'base', 'blkio_stats', 'cache', 'container_id', 'cpu_stats', 'failcnt', 'hierarchical_memory_limit', 'inactive_anon', 'inactive_file', 'interfaces', 'limit', 'mapped_file', 'max_usage', 'memory_stats', 'networks', 'percpu_percpu_usage', 'percpu_period', 'percpu_stats', 'percpu_system_cpu_usage', 'percpu_throttled_periods', 'percpu_throttled_time', 'percpu_throttling_data', 'percpu_total_usage', 'percpu_usage', 'percpu_usage_in_kernelmode', 'percpu_usage_in_usermode', 'period', 'pgfault', 'pgmajfault', 'pgpgin', 'pgpgout', 'pids_stats_current', 'read', 'resp', 'rss', 'rss_huge', 'rx_bytes', 'rx_dropped', 'rx_errors', 'rx_packets', 'session', 'stats', 'stream', 'system_cpu_usage', 'throttled_periods', 'throttled_time', 'throttling_data', 'total_active_anon', 'total_active_file', 'total_cache', 'total_inactive_anon', 'total_inactive_file', 'total_mapped_file', 'total_pgfault', 'total_pgmajfault', 'total_pgpgin', 'total_pgpgout', 'total_rss', 'total_rss_huge', 'total_unevictable', 'total_usage', 'total_writeback', 'tx_bytes', 'tx_dropped', 'tx_errors', 'tx_packets', 'unevictable', 'url', 'usage', 'usage_in_kernelmode', 'usage_in_usermode', 'writeback']\r\n\r\n\r\nProcess()\r\n['__doc__', '__init__', '__module__', 'base', 'container_id', 'processes', 'ps', 'ps_args', 'resp', 'session', 'titles', 'url']\r\n\r\n\r\nLogs()\r\n['__doc__', '__init__', '__module__', 'base', 'container_id', 'details', 'follow', 'logs', 'resp', 'session', 'since', 'stderr', 'stdout', 'tail', 'timestamps', 'url']\r\n\r\n\r\nChanges()\r\n['__doc__', '__init__', '__module__', 'base', 'changes', 'container_id', 'resp', 'session', 'url']\r\n\r\n```\r\n\r\n\r\n# Naming Conventions\r\n\r\nLet's take the example of the \"inspect\" call.\r\nDocer replies with data similar to the following one:\r\n\r\n```\r\n{\r\n    \"AppArmorProfile\": \"\",\r\n    \"Args\": [\r\n        \"-c\",\r\n        \"exit 9\"\r\n    ],\r\n    \"Config\": {\r\n        \"AttachStderr\": true,\r\n        \"AttachStdin\": false,\r\n        \"AttachStdout\": true,\r\n        \"Cmd\": [\r\n            \"/bin/sh\",\r\n            \"-c\",\r\n            \"exit 9\"\r\n        ],\r\n        \"Domainname\": \"\",\r\n        \"Entrypoint\": null,\r\n        \"Env\": [\r\n            \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\r\n        ],\r\n        \"ExposedPorts\": null,\r\n        \"Hostname\": \"ba033ac44011\",\r\n        \"Image\": \"ubuntu\",\r\n        \"Labels\": {\r\n            \"com.example.vendor\": \"Acme\",\r\n            \"com.example.license\": \"GPL\",\r\n            \"com.example.version\": \"1.0\"\r\n        },\r\n        \"MacAddress\": \"\",\r\n        \"NetworkDisabled\": false,\r\n        \"OnBuild\": null,\r\n        \"OpenStdin\": false,\r\n        \"StdinOnce\": false,\r\n        \"Tty\": false,\r\n        \"User\": \"\",\r\n        \"Volumes\": {\r\n            \"/volumes/data\": {}\r\n        },\r\n        \"WorkingDir\": \"\",\r\n        \"StopSignal\": \"SIGTERM\"\r\n    },\r\n    \"Created\": \"2015-01-06T15:47:31.485331387Z\",\r\n    \"Driver\": \"devicemapper\",\r\n    \"ExecIDs\": null,\r\n    \"HostConfig\": {\r\n        \"Binds\": null,\r\n        \"MaximumIOps\": 0,\r\n        \"MaximumIOBps\": 0,\r\n        \"BlkioWeight\": 0,\r\n        \"BlkioWeightDevice\": [{}],\r\n        \"BlkioDeviceReadBps\": [{}],\r\n        \"BlkioDeviceWriteBps\": [{}],\r\n        \"BlkioDeviceReadIOps\": [{}],\r\n        \"BlkioDeviceWriteIOps\": [{}],\r\n        \"CapAdd\": null,\r\n        \"CapDrop\": null,\r\n        \"ContainerIDFile\": \"\",\r\n        \"CpusetCpus\": \"\",\r\n        \"CpusetMems\": \"\",\r\n        \"CpuPercent\": 80,\r\n        \"CpuShares\": 0,\r\n        \"CpuPeriod\": 100000,\r\n        \"Devices\": [],\r\n        \"Dns\": null,\r\n        \"DnsOptions\": null,\r\n        \"DnsSearch\": null,\r\n        \"ExtraHosts\": null,\r\n        \"IpcMode\": \"\",\r\n        \"Links\": null,\r\n        \"LxcConf\": [],\r\n        \"Memory\": 0,\r\n        \"MemorySwap\": 0,\r\n        \"MemoryReservation\": 0,\r\n        \"KernelMemory\": 0,\r\n        \"OomKillDisable\": false,\r\n        \"OomScoreAdj\": 500,\r\n        \"NetworkMode\": \"bridge\",\r\n        \"PidMode\": \"\",\r\n        \"PortBindings\": {},\r\n        \"Privileged\": false,\r\n        \"ReadonlyRootfs\": false,\r\n        \"PublishAllPorts\": false,\r\n        \"RestartPolicy\": {\r\n            \"MaximumRetryCount\": 2,\r\n            \"Name\": \"on-failure\"\r\n        },\r\n        \"LogConfig\": {\r\n            \"Config\": null,\r\n            \"Type\": \"json-file\"\r\n        },\r\n        \"SecurityOpt\": null,\r\n        \"Sysctls\": {\r\n                \"net.ipv4.ip_forward\": \"1\"\r\n        },\r\n        \"StorageOpt\": null,\r\n        \"VolumesFrom\": null,\r\n        \"Ulimits\": [{}],\r\n        \"VolumeDriver\": \"\",\r\n        \"ShmSize\": 67108864\r\n    },\r\n    \"HostnamePath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname\",\r\n    \"HostsPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts\",\r\n    \"LogPath\": \"/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log\",\r\n    \"Id\": \"ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39\",\r\n    \"Image\": \"04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2\",\r\n    \"MountLabel\": \"\",\r\n    \"Name\": \"/boring_euclid\",\r\n    \"NetworkSettings\": {\r\n        \"Bridge\": \"\",\r\n        \"SandboxID\": \"\",\r\n        \"HairpinMode\": false,\r\n        \"LinkLocalIPv6Address\": \"\",\r\n        \"LinkLocalIPv6PrefixLen\": 0,\r\n        \"Ports\": null,\r\n        \"SandboxKey\": \"\",\r\n        \"SecondaryIPAddresses\": null,\r\n        \"SecondaryIPv6Addresses\": null,\r\n        \"EndpointID\": \"\",\r\n        \"Gateway\": \"\",\r\n        \"GlobalIPv6Address\": \"\",\r\n        \"GlobalIPv6PrefixLen\": 0,\r\n        \"IPAddress\": \"\",\r\n        \"IPPrefixLen\": 0,\r\n        \"IPv6Gateway\": \"\",\r\n        \"MacAddress\": \"\",\r\n        \"Networks\": {\r\n            \"bridge\": {\r\n                \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\r\n                \"EndpointID\": \"7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\",\r\n                \"Gateway\": \"172.17.0.1\",\r\n                \"IPAddress\": \"172.17.0.2\",\r\n                \"IPPrefixLen\": 16,\r\n                \"IPv6Gateway\": \"\",\r\n                \"GlobalIPv6Address\": \"\",\r\n                \"GlobalIPv6PrefixLen\": 0,\r\n                \"MacAddress\": \"02:42:ac:12:00:02\"\r\n            }\r\n        }\r\n    },\r\n    \"Path\": \"/bin/sh\",\r\n    \"ProcessLabel\": \"\",\r\n    \"ResolvConfPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf\",\r\n    \"RestartCount\": 1,\r\n    \"State\": {\r\n        \"Error\": \"\",\r\n        \"ExitCode\": 9,\r\n        \"FinishedAt\": \"2015-01-06T15:47:32.080254511Z\",\r\n        \"OOMKilled\": false,\r\n        \"Dead\": false,\r\n        \"Paused\": false,\r\n        \"Pid\": 0,\r\n        \"Restarting\": false,\r\n        \"Running\": true,\r\n        \"StartedAt\": \"2015-01-06T15:47:32.072697474Z\",\r\n        \"Status\": \"running\"\r\n    },\r\n    \"Mounts\": [\r\n        {\r\n            \"Name\": \"fac362...80535\",\r\n            \"Source\": \"/data\",\r\n            \"Destination\": \"/data\",\r\n            \"Driver\": \"local\",\r\n            \"Mode\": \"ro,Z\",\r\n            \"RW\": false,\r\n            \"Propagation\": \"\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nIn DoMonit code the function that will reply with the name of the restart policy should have the following name:\r\n\r\n```\r\ndef host_config_restart_policy_name():\r\n    [...]\r\n    return [...]\r\n```\r\n\r\n- Functions name are in small letters and describes the \"path\" to follow in the json response to get it.\r\n- ```HostConfig``` should be named ```host_config``` and ```RestartPolicy``` should be named ```restart_policy``` which gives ```host_config_restart_policy_name```\r\n\r\n```\r\n    \"HostConfig\": {\r\n        \"\":\"\",\r\n        \"\":\"\",\r\n        \"\":\"\",\r\n\t[...]\r\n        \"RestartPolicy\": {\r\n            \"MaximumRetryCount\": 2,\r\n            \"Name\": \"on-failure\"\r\n        },\r\n        [...]\r\n    },\r\n```\r\n\r\n# How To Contribute\r\n- Submit a feature proposal if you have new features to add. If you fixing a bug, this step is optional\r\n- Fork the repo and then clone it to your development machine\r\n\r\n```\r\ngit clone https://github.com/eon01/DoMonit.git\r\n```\r\n- Create a new branch\r\n```\r\ngit checkout -b my-new-feature\r\n```\r\n- Add your code \r\n- Follow the code style and naming conventions\r\n- Write some documentations and tests\r\n- Commit your changes and push the new branch to your fork\r\n```\r\ngit add .\r\ngit commit -m 'Your detailed description'\r\ngit push origin my-new-feature\r\n```\r\n- Submit a pull request\r\n- You can get a list of your commits:\r\n```\r\ngit log --oneline origin/master..my-new-feature\r\n```\r\n- It is optional but if accepted and merged, you can delete your branch (remotly and locally)\r\n```\r\ngit checkout master\r\ngit push origin :my-new-feature\r\ngit branch -D my-new-feature\r\n```\r\n\r\n# ToDo\r\n- Documentation\r\n- Exception & timeout handling\r\n- Unit testing\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}